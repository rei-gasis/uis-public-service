package xxup.oracle.apps.per.publicservice.institutional.server;

import java.sql.CallableStatement;
import java.sql.Connection;

import java.util.Arrays;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OAViewRowImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;

import oracle.jbo.Transaction;

import xxup.oracle.apps.per.publicservice.institutional.lov.server.PerPSInstActivitiesVOImpl;
import xxup.oracle.apps.per.publicservice.institutional.lov.server.PerPSInstDeliveryModeVOImpl;
import xxup.oracle.apps.per.publicservice.lov.server.PerPSAddressVOImpl;
import xxup.oracle.apps.per.publicservice.lov.server.PerPSBeneficiaryTypeVOImpl;
import xxup.oracle.apps.per.publicservice.lov.server.PerPSCountryVOImpl;
import xxup.oracle.apps.per.publicservice.lov.server.PerPSSubjectAreaInterestVOImpl;
import xxup.oracle.apps.per.publicservice.server.PerPSActionHistoryVOImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PSInstitutionalAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public PSInstitutionalAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("xxup.oracle.apps.per.publicservice.institutional.server", 
                                             "PSInstitutionalAMLocal");
    }

    public void initVOForNewRequest() {
        XxupPerPSInstTrEOVOImpl mainVO = getXxupPerPSInstTrEOVO1();
        mainVO.initNewRecord();


        XxupPerPSInstOfficeEOVOImpl officeVO = getXxupPerPSInstOfficeEOVO1();
        officeVO.initNewRecord();

        XxupPerPSInstMembersEOVOImpl membersVO = 
            getXxupPerPSInstMembersEOVO1();
        membersVO.initNewRecord();

        XxupPerPSInstOtherMembersVOImpl NonUPVO = 
            getXxupPerPSInstOtherMembersVO1();
        NonUPVO.initNewRecord();


        XxupPerPSInstObjCatEOVOImpl objCatVO = getXxupPerPSInstObjCatEOVO1();
        objCatVO.initNewRecord();

        XxupPerPSInstBenefOrgEOVOImpl benefOrgVO = 
            getXxupPerPSInstBenefOrgEOVO1();
        benefOrgVO.initNewRecord();

        XxupPerPSInstAddrEOVOImpl addrVO = getXxupPerPSInstAddrEOVO1();
        addrVO.initNewRecord();


        XxupPerPSInstPartnerOrgEOVOImpl partnerVO = 
            getXxupPerPSInstPartnerOrgEOVO1();
        partnerVO.initNewRecord();


        LoadNewSubjectAreaOfInterestInTable();

        LoadNewBenefTypeInTable();

        LoadNewDeliveryModeInTable();

        LoadNewActivitiesInTable();

    }


    //     public PerPSActionHistoryVOImpl getPerPSActionHistoryVO1(){
    //        return (PerPSActionHistoryVOImpl) findViewObject("PerPSActionHistoryVO1");
    //    }


    /**Container's getter for XxupPerPSInstObjCatEOVO1
     */
    public XxupPerPSInstObjCatEOVOImpl getXxupPerPSInstObjCatEOVO1() {
        return (XxupPerPSInstObjCatEOVOImpl)findViewObject("XxupPerPSInstObjCatEOVO1");
    }

    public void LoadNewActivitiesInTable() {
        XxupPerPSInstActivitiesEOVOImpl actVO = 
            getXxupPerPSInstActivitiesEOVO1();
        actVO.initNewRecord();

        if (actVO.getRowCount() < 1) {
            PerPSInstActivitiesVOImpl sourceVO = getPerPSInstActivitiesVO1();
            sourceVO.initRecords();

            for (Row row = sourceVO.first(); row != null; 
                 row = sourceVO.next()) {
                Row destinationRow = actVO.createRow();
                destinationRow.setAttribute("Activity", 
                                            row.getAttribute("Activity"));
                actVO.insertRow(destinationRow);
            }
        }

        //        delModeVO.setOrderByClause("DELIVERY_MODE");

    }

    public void LoadExistActivitiesInTable(String sequenceNo) {

        XxupPerPSInstActivitiesEOVOImpl actVO = 
            getXxupPerPSInstActivitiesEOVO1();

        actVO.initExistingPS(sequenceNo);

        PerPSInstActivitiesVOImpl sourceVO = getPerPSInstActivitiesVO1();
        sourceVO.initRecords();
        //        sourceVO.executeQuery();

        Integer line = sourceVO.getRowCount();
        Row rowActivity = null;
        Row row = null;


        RowSetIterator rs = actVO.createRowSetIterator(null);
        rs.setRangeStart(0);
        String[] arrExistActivity = new String[rs.getRowCount()];
        rs.reset();


        int ctr = 0;
        while (rs.hasNext()) {
            Row r = rs.next();
            /*Exclude "Others" value*/
            if (r.getAttribute("Attribute1") == null) {
                arrExistActivity[ctr] = r.getAttribute("Activity").toString();
                ctr++;

                //                 System.out.println("exists: " + r.getAttribute("DeliveryMode").toString());
            } else {
                r.remove();
            }
        }


        rs.closeRowSetIterator();


        for (row = (OAViewRowImpl)sourceVO.first(); row != null; 
             row = (OAViewRowImpl)sourceVO.next()) {


            String strActivity = row.getAttribute("Activity").toString();


            if (!Arrays.asList(arrExistActivity).contains(strActivity)) {

                rowActivity = actVO.createRow();
                rowActivity.setAttribute("Activity", 
                                         row.getAttribute("Activity"));
                actVO.insertRow(rowActivity);

            }


        }

    }

    public void LoadNewBenefTypeInTable() {
        XxupPerPSInstBenefTypeEOVOImpl benefTypeVO = 
            getXxupPerPSInstBenefTypeEOVO1();
        benefTypeVO.initNewRecord();

        if (benefTypeVO.getRowCount() < 1) {
            PerPSBeneficiaryTypeVOImpl sourceVO = getPerPSBeneficiaryTypeVO1();
            sourceVO.setWhereClause(null);
            sourceVO.setOrderByClause("TYPE_OF_BENEFICIARY DESC");
            sourceVO.executeQuery();

            for (Row row = sourceVO.first(); row != null; 
                 row = sourceVO.next()) {
                Row destinationRow = benefTypeVO.createRow();
                destinationRow.setAttribute("TypeOfBeneficiary", 
                                            row.getAttribute("TypeOfBeneficiary"));
                benefTypeVO.insertRow(destinationRow);
            }
        }

        benefTypeVO.setOrderByClause("TYPE_OF_BENEFICIARY");

    }


    public void LoadExistBenefTypeInTable(String sequenceNo) {
        XxupPerPSInstBenefTypeEOVOImpl benefTypeVO = 
            getXxupPerPSInstBenefTypeEOVO1();
        benefTypeVO.initExistingPS(sequenceNo);


        PerPSBeneficiaryTypeVOImpl sourceVO = getPerPSBeneficiaryTypeVO1();
        sourceVO.executeQuery();

        Integer line = sourceVO.getRowCount();
        Row rowBenefType = null;
        Row row = null;


        RowSetIterator rs = benefTypeVO.createRowSetIterator(null);
        String[] arrExistBenefType = new String[rs.getRowCount()];
        rs.reset();


        int ctr = 0;
        while (rs.hasNext()) {
            Row r = rs.next();
            arrExistBenefType[ctr] = 
                    r.getAttribute("TypeOfBeneficiary").toString();
            ctr++;
        }


        rs.closeRowSetIterator();

        for (row = (OAViewRowImpl)sourceVO.first(); row != null; 
             row = (OAViewRowImpl)sourceVO.next()) {


            String strTypeOfBeneficiary = 
                row.getAttribute("TypeOfBeneficiary").toString();


            if (!Arrays.asList(arrExistBenefType).contains(strTypeOfBeneficiary)) {
                rowBenefType = benefTypeVO.createRow();
                rowBenefType.setAttribute("TypeOfBeneficiary", 
                                          row.getAttribute("TypeOfBeneficiary"));
                benefTypeVO.insertRow(rowBenefType);
            }
            //line = line - 1;
        }

        benefTypeVO.setOrderByClause("TYPE_OF_BENEFICIARY");
        //        benefTypeVO.executeQuery();

    }


    public void LoadNewDeliveryModeInTable() {
        XxupPerPSInstDeliveryModeEOVOImpl delModeVO = 
            getXxupPerPSInstDeliveryModeEOVO1();
        delModeVO.initNewRecord();

        if (delModeVO.getRowCount() < 1) {
            PerPSInstDeliveryModeVOImpl sourceVO = 
                getPerPSInstDeliveryModeVO1();
            sourceVO.initRecords();

            for (Row row = sourceVO.first(); row != null; 
                 row = sourceVO.next()) {
                Row destinationRow = delModeVO.createRow();
                destinationRow.setAttribute("DeliveryMode", 
                                            row.getAttribute("DeliveryMode"));
                delModeVO.insertRow(destinationRow);
            }
        }

        delModeVO.setOrderByClause("DELIVERY_MODE");

    }

    public void LoadExistDeliveryModeInTable(String sequenceNo) {

        XxupPerPSInstDeliveryModeEOVOImpl delModeVO = 
            getXxupPerPSInstDeliveryModeEOVO1();

        delModeVO.initExistingPS(sequenceNo);

        PerPSInstDeliveryModeVOImpl sourceVO = getPerPSInstDeliveryModeVO1();
        sourceVO.initRecords();
        //        sourceVO.executeQuery();

        Integer line = sourceVO.getRowCount();
        Row rowDelMode = null;
        Row row = null;


        RowSetIterator rs = delModeVO.createRowSetIterator(null);
        rs.setRangeStart(0);
        String[] arrExistDelMode = new String[rs.getRowCount()];
        rs.reset();


        int ctr = 0;
        while (rs.hasNext()) {
            Row r = rs.next();
            /*Exclude "Others" value*/
            if (r.getAttribute("Attribute1") == null) {
                arrExistDelMode[ctr] = 
                        r.getAttribute("DeliveryMode").toString();
                ctr++;

                //                System.out.println("exists: " + r.getAttribute("DeliveryMode").toString());
            } else {
                r.remove();
            }
        }


        rs.closeRowSetIterator();


        for (row = (OAViewRowImpl)sourceVO.first(); row != null; 
             row = (OAViewRowImpl)sourceVO.next()) {


            String strDeliveryMode = 
                row.getAttribute("DeliveryMode").toString();


            if (!Arrays.asList(arrExistDelMode).contains(strDeliveryMode)) {

                //                System.out.println(strDeliveryMode);

                rowDelMode = delModeVO.createRow();
                rowDelMode.setAttribute("DeliveryMode", 
                                        row.getAttribute("DeliveryMode"));
                delModeVO.insertRow(rowDelMode);

            }


            //line = line - 1;
        }

        //        delModeVO.setOrderByClause("DELIVERY_MODE");
        //        delModeVO.executeQuery();

    }

    public void LoadNewSubjectAreaOfInterestInTable() {

        XxupPerPSInstSubjEOVOImpl ppssVO = getXxupPerPSInstSubjEOVO1();
        ppssVO.initNewRecord();

        //        ppssVO.setMaxFetchSize(0);

        //        ppssVO.executeQuery();

        //
        if (ppssVO.getRowCount() < 1) {
            PerPSSubjectAreaInterestVOImpl ppsaVO = 
                getPerPSSubjectAreaInterestVO1();

            ppsaVO.executeQuery();
            Integer line = ppsaVO.getRowCount();
            Row newRowForSubArea = null;
            Row row = null;

            for (row = (OAViewRowImpl)ppsaVO.first(); row != null; 
                 row = (OAViewRowImpl)ppsaVO.next()) {
                newRowForSubArea = ppssVO.createRow();
                newRowForSubArea.setAttribute("SubjectAreaInterest", 
                                              row.getAttribute("SubjectAreaInterestDisplay"));
                ppssVO.insertRow(newRowForSubArea);
                //line = line - 1;
            }
        }

        ppssVO.setOrderByClause("SUBJECT_AREA_INTEREST");

    }


    public void LoadExistSubjectAreaOfInterestTable(String sequenceNo) {

        XxupPerPSInstSubjEOVOImpl existVO = getXxupPerPSInstSubjEOVO1();


        existVO.initExistingPS(sequenceNo);

        //if (ppssVO.getRowCount() < 1) {
        PerPSSubjectAreaInterestVOImpl ppsaVO = 
            getPerPSSubjectAreaInterestVO1();

        ppsaVO.executeQuery();
        Integer line = ppsaVO.getRowCount();
        Row newRowForSubArea = null;
        Row row = null;


        /* 1. create rowset iterator to convert view into array
         * 2. loop for each Subject Area LOV and check if the LOV contains the existing subject area
         * 3. If yes, do not create the LOV row. Otherwise, create the LOV row
         *
         * */

        RowSetIterator rs = existVO.createRowSetIterator(null);
        String[] arrExistSubj = new String[rs.getRowCount()];
        rs.reset();


        int ctr = 0;
        while (rs.hasNext()) {
            Row r = rs.next();
            arrExistSubj[ctr] = 
                    r.getAttribute("SubjectAreaInterest").toString();
            ctr++;
        }


        rs.closeRowSetIterator();


        /*Loop through LOV*/
        for (row = (OAViewRowImpl)ppsaVO.first(); row != null; 
             row = (OAViewRowImpl)ppsaVO.next()) {


            String subjArea = 
                row.getAttribute("SubjectAreaInterestDisplay").toString();
            //Set<String> alreadyExist = new HashSet<String>());


            if (!Arrays.asList(arrExistSubj).contains(subjArea)) {
                newRowForSubArea = existVO.createRow();
                newRowForSubArea.setAttribute("SubjectAreaInterest", 
                                              row.getAttribute("SubjectAreaInterestDisplay"));
                existVO.insertRow(newRowForSubArea);

            }


            //line = line - 1;
        }

        existVO.setOrderByClause("SUBJECT_AREA_INTEREST");


    }

    public void updatePS(String paramSequenceNo) {


        try {


            XxupPerPSInstTrEOVOImpl mainVO = getXxupPerPSInstTrEOVO1();
            mainVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstAddrEOVOImpl addrVO = getXxupPerPSInstAddrEOVO1();
            addrVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstBenefOrgEOVOImpl benefOrgVO = 
                getXxupPerPSInstBenefOrgEOVO1();
            benefOrgVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstBenefTypeEOVOImpl benefTypeVO = 
                getXxupPerPSInstBenefTypeEOVO1();
            benefTypeVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstDeliveryModeEOVOImpl delModeVO = 
                getXxupPerPSInstDeliveryModeEOVO1();
            delModeVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstMembersEOVOImpl membersVO = 
                getXxupPerPSInstMembersEOVO1();
            membersVO.initExistingPS(paramSequenceNo);

            //            XxupPerPSInstOtherMembersVOImpl othersVO = getXxupPerPSInstOtherMembersVO1();
            //            othersVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstObjCatEOVOImpl objCatVO = 
                getXxupPerPSInstObjCatEOVO1();
            objCatVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstOfficeEOVOImpl officeVO = 
                getXxupPerPSInstOfficeEOVO1();
            officeVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstPartnerOrgEOVOImpl partnerOrgVO = 
                getXxupPerPSInstPartnerOrgEOVO1();
            partnerOrgVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstSubjEOVOImpl subjVO = getXxupPerPSInstSubjEOVO1();
            subjVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstActivitiesEOVOImpl actVO = 
                getXxupPerPSInstActivitiesEOVO1();
                
                
            if (subjVO.getRowCount() < 1) {
                LoadNewSubjectAreaOfInterestInTable();
            } else if (subjVO.getRowCount() >= 1) {
                LoadExistSubjectAreaOfInterestTable(paramSequenceNo);
            }    


            if (actVO.getRowCount() < 1) {
                LoadNewActivitiesInTable();
            } else if (actVO.getRowCount() >= 1) {
                LoadExistActivitiesInTable(paramSequenceNo);
            }


            if (delModeVO.getRowCount() < 1) {
                LoadNewDeliveryModeInTable();
            } else if (delModeVO.getRowCount() >= 1) {
                LoadExistDeliveryModeInTable(paramSequenceNo);
            }

            if (benefTypeVO.getRowCount() < 1) {
                LoadNewBenefTypeInTable();
            } else if (benefTypeVO.getRowCount() >= 1) {
                LoadExistBenefTypeInTable(paramSequenceNo);
            }


            removeNonMemberVO(paramSequenceNo);


        } catch (Exception ex) {
            throw OAException.wrapperException(ex);
        }


    }

    public void updateRecord(String pSequenceNo) {
        XxupPerPSInstTrEOVOImpl oldPSVO = getXxupPerPSInstTrEOVO1();
        oldPSVO.initExistingPS(pSequenceNo);


    }

    public void reviewPS(String paramSequenceNo) {


        try {
            //            System.out.println("ReviewPS " + paramSequenceNo);

            XxupPerPSInstTrEOVOImpl mainVO = getXxupPerPSInstTrEOVO1();
            mainVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstAddrEOVOImpl addrVO = getXxupPerPSInstAddrEOVO1();
            addrVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstBenefOrgEOVOImpl benefOrgVO = 
                getXxupPerPSInstBenefOrgEOVO1();
            benefOrgVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstBenefTypeEOVOImpl benefTypeVO = 
                getXxupPerPSInstBenefTypeEOVO1();
            benefTypeVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstDeliveryModeEOVOImpl delModeVO = 
                getXxupPerPSInstDeliveryModeEOVO1();
            delModeVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstMembersEOVOImpl membersVO = 
                getXxupPerPSInstMembersEOVO1();
            membersVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstObjCatEOVOImpl objCatVO = 
                getXxupPerPSInstObjCatEOVO1();
            objCatVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstOfficeEOVOImpl officeVO = 
                getXxupPerPSInstOfficeEOVO1();
            officeVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstPartnerOrgEOVOImpl partnerOrgVO = 
                getXxupPerPSInstPartnerOrgEOVO1();
            partnerOrgVO.initExistingPS(paramSequenceNo);

            XxupPerPSInstSubjEOVOImpl subjVO = getXxupPerPSInstSubjEOVO1();
            subjVO.initExistingPS(paramSequenceNo);
            
            XxupPerPSInstActivitiesEOVOImpl actVO = getXxupPerPSInstActivitiesEOVO1();
            actVO.initExistingPS(paramSequenceNo);
            
            

        } catch (Exception ex) {
            throw OAException.wrapperException(ex);
        }
    }

    public void initApprovers(String sequenceNo) {


        try {


            Connection conn = getOADBTransaction().getJdbcConnection();
            CallableStatement stmt = 
                conn.prepareCall("{call xxup_ps_inst_wf_pkg.init_approvers(?)}");

            stmt.setString(1, sequenceNo);
            stmt.execute();
            stmt.close();


        } catch (Exception ex) {
            OAException error = 
                new OAException("Error occured initializing approvers table " + 
                                ex);
            throw OAException.wrapperException(error);
        }
    }

    public void initWF(String sequenceNo) {
        try {


            Connection conn = getOADBTransaction().getJdbcConnection();
            CallableStatement stmt = 
                conn.prepareCall("{call xxup_ps_inst_wf_pkg.init_wf(?)}");


            stmt.setString(1, sequenceNo);
            stmt.execute();
            stmt.close();

        } catch (Exception ex) {
            throw new OAException("Error occured calling workflow " + ex);
        }
    }

    public void setApproversTable(String paramSequenceNo) {
        try {

            PerPSActionHistoryVOImpl ahVO = getPerPSActionHistoryVO1();


            ahVO.initApprovers(paramSequenceNo);

        } catch (Exception ex) {
            OAException.wrapperException(ex);
        }
    }

    public void setAttachments(String paramSequenceNo) {
        try {

            XxupPerPSInstTrEOVOImpl pshVO = getXxupPerPSInstTrEOVO1();
            pshVO.initExistingPS(paramSequenceNo);


        } catch (Exception ex) {
            OAException.wrapperException(ex);
        }
    }

    public void resubmitPS(String sequenceNo) {
        try {


            Connection conn = getOADBTransaction().getJdbcConnection();
            CallableStatement stmt = 
                conn.prepareCall("{call xxup_ps_inst_wf_pkg.resubmit(?)}");


            stmt.setString(1, sequenceNo);
            stmt.execute();
            stmt.close();

        } catch (Exception ex) {
            throw new OAException("Error occured calling workflow " + ex);
        }
    }

    public void saveDetails() {


        /*Object Category*/
        XxupPerPSInstTrEOVOImpl mainVo = getXxupPerPSInstTrEOVO1();

        String sequenceNo = 
            mainVo.getCurrentRow().getAttribute("SequenceNo").toString();
        //System.out.println(sequenceNo);

        Row headerRow = (OAViewRowImpl)mainVo.getCurrentRow();


        if (headerRow != null) {


            XxupPerPSInstObjCatEOVOImpl ppocVO = getXxupPerPSInstObjCatEOVO1();

            Integer lineNumber = 1;
            //System.out.println("total count" + lineNumber); 

            for (Row rowi: ppocVO.getAllRowsInRange()) {
                String objCatDisplay = "";
                if (rowi.getAttribute("ObjectiveCategory") != null) {
                    objCatDisplay = 
                            rowi.getAttribute("ObjectiveCategory").toString();
                }


                if (objCatDisplay != "") {
                    rowi.setAttribute("SequenceNo", sequenceNo);
                    rowi.setAttribute("LineNumber", lineNumber);


                    lineNumber += 1;
                } else if (objCatDisplay == "") {
                    rowi.remove();
                }


            }

            lineNumber = 1;

            /*Office*/
            XxupPerPSInstOfficeEOVOImpl officeVO = 
                getXxupPerPSInstOfficeEOVO1();


            for (Row rowi: officeVO.getAllRowsInRange()) {
                String office = "";
                if (rowi.getAttribute("Office") != null) {
                    office = rowi.getAttribute("Office").toString();
                }


                if (office != "") {
                    rowi.setAttribute("SequenceNo", sequenceNo);
                    rowi.setAttribute("LineNumber", lineNumber);


                    lineNumber += 1;
                } else if (office == "") {
                    rowi.remove();
                }
            }

            //reset counter
            lineNumber = 1;

            /*Members*/
            XxupPerPSInstMembersEOVOImpl ppmVO = 
                getXxupPerPSInstMembersEOVO1();


            for (Row rowi: ppmVO.getAllRowsInRange()) {
                String member = "";
                if (rowi.getAttribute("FullName") != null) {
                    member = rowi.getAttribute("FullName").toString();
                }


                if (member != "") {
                    rowi.setAttribute("SequenceNo", sequenceNo);
                    rowi.setAttribute("LineNumber", lineNumber);


                    lineNumber += 1;
                } else if (member == "") {
                    rowi.remove();
                }
            }

            /*Append non-up members*/
            XxupPerPSInstOtherMembersVOImpl otherMembersVO = 
                getXxupPerPSInstOtherMembersVO1();

            for (Row rowi: otherMembersVO.getAllRowsInRange()) {
                String member = "";
                String position = "";
                String organization = "";
                String projectRole = "";


                if (rowi.getAttribute("FullName") != null) {

                    Row memberRow = ppmVO.createRow();
                    member = rowi.getAttribute("FullName").toString();

                    if (rowi.getAttribute("Position") != null)
                        position = rowi.getAttribute("Position").toString();


                    if (rowi.getAttribute("Organization") != null)
                        organization = 
                                rowi.getAttribute("Organization").toString();

                    if (rowi.getAttribute("ProjectRole") != null)
                        projectRole = 
                                rowi.getAttribute("ProjectRole").toString();


                    memberRow.setAttribute("FullName", member);
                    memberRow.setAttribute("Position", position);
                    memberRow.setAttribute("Organization", organization);
                    memberRow.setAttribute("ProjectRole", projectRole);
                    memberRow.setAttribute("Attribute1", "Non-UP");


                    memberRow.setAttribute("SequenceNo", sequenceNo);
                    memberRow.setAttribute("LineNumber", lineNumber);
                    ppmVO.insertRow(memberRow);

                    lineNumber += 1;

                } else if (member == "") {
                    rowi.remove();
                }

            }

            lineNumber = 1;


            /*Partner Organization/Institution */
            XxupPerPSInstPartnerOrgEOVOImpl partnerOrgVO = 
                getXxupPerPSInstPartnerOrgEOVO1();


            for (Row rowi: partnerOrgVO.getAllRowsInRange()) {
                String name = "";
                if (rowi.getAttribute("OrganizationName") != null) {
                    name = rowi.getAttribute("OrganizationName").toString();
                }


                if (name != "") {
                    rowi.setAttribute("SequenceNo", sequenceNo);
                    rowi.setAttribute("LineNumber", lineNumber);


                    lineNumber += 1;
                } else if (name == "") {
                    rowi.remove();
                }
            }


            //reset counter
            lineNumber = 1;


            /*Subject area of interest*/

            XxupPerPSInstSubjEOVOImpl ppssVO = getXxupPerPSInstSubjEOVO1();


            Row selectedRows[] = ppssVO.getFilteredRows("Selected", "Y");
            Row deselectedRows[] = ppssVO.getFilteredRows("Selected", null);


            //            System.out.println("subj area count: " + selectedRows.length);

            //            System.out.println("Selected");

            for (Row rowi: selectedRows) {

                String subj = 
                    rowi.getAttribute("SubjectAreaInterest").toString();

                //                System.out.println(subj);

                rowi.setAttribute("SequenceNo", sequenceNo);
                rowi.setAttribute("LineNumber", lineNumber);

                lineNumber += 1;

            }


            //            System.out.println("not selected");

            for (Row rowi: deselectedRows) {

                if (rowi.getAttribute("Selected") == null) {
                    String subj = 
                        rowi.getAttribute("SubjectAreaInterest").toString();

                    //                    System.out.println(subj);


                    rowi.remove();
                }

            }

            //reset counter
            lineNumber = 1;


            /*Activities*/

            XxupPerPSInstActivitiesEOVOImpl actVO = 
                getXxupPerPSInstActivitiesEOVO1();


            Row selectedActRows[] = actVO.getFilteredRows("Selected", "Y");
            Row deselectedActRows[] = actVO.getFilteredRows("Selected", null);


            for (Row rowi: selectedActRows) {
                String strDelMode = rowi.getAttribute("Activity").toString();
                if ("Others".equals(strDelMode)) {
                    rowi.remove();
                } else {
                    rowi.setAttribute("SequenceNo", sequenceNo);
                    rowi.setAttribute("LineNumber", lineNumber);
                    lineNumber += 1;
                }
            }


            //Append others field's value
            if (headerRow.getAttribute("ActivityOthers") != null) {
                String strActivity = 
                    headerRow.getAttribute("ActivityOthers").toString();
                //                System.out.println("others: " + strDelMode);
                //                if (!"".equals(strDelMode)) {

                lineNumber += 1;
                Row othersRow = actVO.createRow();


                othersRow.setAttribute("SequenceNo", sequenceNo);
                othersRow.setAttribute("Activity", strActivity);
                othersRow.setAttribute("LineNumber", lineNumber);
                othersRow.setAttribute("Selected", "Y");
                othersRow.setAttribute("Attribute1", "Others");

                actVO.insertRow(othersRow);


                //                System.out.println("inserted");
                //                }
            }


            for (Row rowi: actVO.getAllRowsInRange()) {
                if (rowi.getAttribute("Selected") == null) {
                    rowi.remove();
                }
            }


            lineNumber = 1;


            /*DeliveryMode*/

            XxupPerPSInstDeliveryModeEOVOImpl delModeVO = 
                getXxupPerPSInstDeliveryModeEOVO1();


            Row selectedDMRows[] = delModeVO.getFilteredRows("Selected", "Y");
            Row deselectedDMRows[] = 
                delModeVO.getFilteredRows("Selected", null);


            //            System.out.println("subj area count: " + selectedRows.length);

            for (Row rowi: selectedDMRows) {
                String strDelMode = 
                    rowi.getAttribute("DeliveryMode").toString();
                if ("Others".equals(strDelMode)) {
                    rowi.remove();
                } else {
                    rowi.setAttribute("SequenceNo", sequenceNo);
                    rowi.setAttribute("LineNumber", lineNumber);
                    lineNumber += 1;
                }
                
                //                }

            }


            //            String[] testDelMode = {"a", "b", "c"};
            //            
            //            int ctr = 0;
            //            while(ctr < testDelMode.length) {
            //                Row othersRow = delModeVO.createRow();
            //
            //                othersRow.setAttribute("SequenceNo", sequenceNo);
            //                othersRow.setAttribute("DeliveryMode", testDelMode[ctr]);
            //                othersRow.setAttribute("LineNumber", lineNumber);
            //
            //                delModeVO.insertRow(othersRow);
            //                
            //                ctr++;
            //            }


            //Append others field's value
            if (headerRow.getAttribute("DelModeOthers") != null) {
                String strDelMode = 
                    headerRow.getAttribute("DelModeOthers").toString();
                //                System.out.println("others: " + strDelMode);
                //                if (!"".equals(strDelMode)) {

                lineNumber += 1;
                Row othersRow = delModeVO.createRow();


                othersRow.setAttribute("SequenceNo", sequenceNo);
                othersRow.setAttribute("DeliveryMode", strDelMode);
                othersRow.setAttribute("LineNumber", lineNumber);
                othersRow.setAttribute("Selected", "Y");
                othersRow.setAttribute("Attribute1", "Others");

                delModeVO.insertRow(othersRow);


                //                System.out.println("inserted");
                //                }
            }


            for (Row rowi: delModeVO.getAllRowsInRange()) {
                if (rowi.getAttribute("Selected") == null) {
                    rowi.remove();
                }
            }

            lineNumber = 1;

            /*Type of Beneficiary*/

            XxupPerPSInstBenefTypeEOVOImpl benefTypeVO = 
                getXxupPerPSInstBenefTypeEOVO1();


            Row selectedBTRows[] = 
                benefTypeVO.getFilteredRows("Selected", "Y");
            Row deselectedBTRows[] = 
                benefTypeVO.getFilteredRows("Selected", null);

            for (Row rowi: selectedBTRows) {

                rowi.setAttribute("SequenceNo", sequenceNo);
                rowi.setAttribute("LineNumber", lineNumber);

                lineNumber += 1;

            }


            for (Row rowi: benefTypeVO.getAllRowsInRange()) {


                if (rowi.getAttribute("Selected") == null) {
                    rowi.remove();
                }
            }


            lineNumber = 1;


            /*Address*/
            XxupPerPSInstAddrEOVOImpl addrVO = getXxupPerPSInstAddrEOVO1();


            for (Row rowi: addrVO.getAllRowsInRange()) {
                String address = "";
                if (rowi.getAttribute("Address") != null) {
                    address = rowi.getAttribute("Address").toString();
                }


                if (address != "") {
                    rowi.setAttribute("SequenceNo", sequenceNo);
                    rowi.setAttribute("LineNumber", lineNumber);


                    lineNumber += 1;
                } else if (address == "") {
                    rowi.remove();
                }
            }


            lineNumber = 1;


            /*Beneficiary Organization*/
            XxupPerPSInstBenefOrgEOVOImpl benefOrgVO = 
                getXxupPerPSInstBenefOrgEOVO1();


            for (Row rowi: benefOrgVO.getAllRowsInRange()) {
                String name = "";
                if (rowi.getAttribute("BeneficiaryOrganization") != null) {
                    name = 
rowi.getAttribute("BeneficiaryOrganization").toString();
                }


                if (name != "") {
                    rowi.setAttribute("SequenceNo", sequenceNo);
                    rowi.setAttribute("LineNumber", lineNumber);


                    lineNumber += 1;
                } else if (name == "") {
                    rowi.remove();
                }
            }


        }

    }

    public void showSummaryVO() {
//        XxupPerPSInstitutionalEOVOImpl vo = getXxupPerPSInstitutionalEOVO1();
        PerPSInstAdminSummaryVOImpl vo = getPerPSInstAdminSummaryVO1();
        
        if (vo != null) {
            vo.initVO();
        }

    }

    public void commitTransaction() {
        getTransaction().commit();
    }

    public void rollbackPS() {
        Transaction txn = getTransaction();
        if (txn.isDirty()) {
            txn.rollback();
        }
    }

    /*Procedure to remove Non-UP members from the UP team member list*/

    public void removeNonMemberVO(String paramSequenceNo) {
        XxupPerPSInstMembersEOVOImpl membersVO = 
            getXxupPerPSInstMembersEOVO1();
        membersVO.initExistingPS(paramSequenceNo);


        XxupPerPSInstOtherMembersVOImpl othersVO = 
            getXxupPerPSInstOtherMembersVO1();
        othersVO.setMaxFetchSize(0);
        othersVO.executeQuery();


        String fullName = "";
        String isUP = "";

        /*  Loop for each record and check if the member is Non-UP
         *  if yes, remove the Non UP member from the UP group
         * */
        //        for(Row rowi : membersVO.getAllRowsInRange()){
        for (Row rowi = membersVO.first(); rowi != null; 
             rowi = membersVO.next()) {

            if (rowi.getAttribute("FullName") != null) {
                fullName = rowi.getAttribute("FullName").toString();
                //                System.out.println(fullName);
            }

            if (rowi.getAttribute("Attribute1") != null) {
                isUP = rowi.getAttribute("Attribute1").toString();
                //                System.out.println(isUP);

                if ("Non-UP".equals(isUP)) {

                    Row othersRow = othersVO.createRow();

                    if (rowi.getAttribute("FullName") != null)
                        othersRow.setAttribute("FullName", 
                                               rowi.getAttribute("FullName").toString());

                    if (rowi.getAttribute("Position") != null)
                        othersRow.setAttribute("Position", 
                                               rowi.getAttribute("Position").toString());

                    if (rowi.getAttribute("Organization") != null)
                        othersRow.setAttribute("Organization", 
                                               rowi.getAttribute("Organization").toString());

                    if (rowi.getAttribute("ProjectRole") != null)
                        othersRow.setAttribute("ProjectRole", 
                                               rowi.getAttribute("ProjectRole").toString());

                    othersVO.insertRow(othersRow);

                    rowi.remove();
                }
            }

        }


    }

    /*Procedure to return Non-UP members from the UP team member list (used in create PS)*/

    public void returnNonMemberVO() {
        XxupPerPSInstMembersEOVOImpl membersVO = 
            getXxupPerPSInstMembersEOVO1();
        //        membersVO.initExistingPS();


        //        XxupPerPSInstOtherMembersVOImpl othersVO = getXxupPerPSInstOtherMembersVO1();
        //        othersVO.setMaxFetchSize(0);
        //        othersVO.executeQuery();


        String fullName = "";
        String isUP = "";

        /*  Loop for each record and check if the member is Non-UP
         *  if yes, remove the Non UP member from the UP group
         * */
        //        for(Row rowi : membersVO.getAllRowsInRange()){
        for (Row rowi = membersVO.first(); rowi != null; 
             rowi = membersVO.next()) {


            if (rowi.getAttribute("Attribute1") != null) {
                isUP = rowi.getAttribute("Attribute1").toString();

                if ("Non-UP".equals(isUP)) {
                    rowi.remove();
                }
            }

        }


    }

    /**Container's getter for XxupPerPSInstSubjEOVO1
     */
    public XxupPerPSInstSubjEOVOImpl getXxupPerPSInstSubjEOVO1() {
        return (XxupPerPSInstSubjEOVOImpl)findViewObject("XxupPerPSInstSubjEOVO1");
    }

    /**Container's getter for PerPSSubjectAreaInterestVO1
     */
    public PerPSSubjectAreaInterestVOImpl getPerPSSubjectAreaInterestVO1() {
        return (PerPSSubjectAreaInterestVOImpl)findViewObject("PerPSSubjectAreaInterestVO1");
    }


    /**Container's getter for XxupPerPSInstAddrEOVO1
     */
    public XxupPerPSInstAddrEOVOImpl getXxupPerPSInstAddrEOVO1() {
        return (XxupPerPSInstAddrEOVOImpl)findViewObject("XxupPerPSInstAddrEOVO1");
    }

    /**Container's getter for PerPSCountryVO1
     */
    public PerPSCountryVOImpl getPerPSCountryVO1() {
        return (PerPSCountryVOImpl)findViewObject("PerPSCountryVO1");
    }

    /**Container's getter for PerPSActionHistoryVO1
     */
    public PerPSActionHistoryVOImpl getPerPSActionHistoryVO1() {
        return (PerPSActionHistoryVOImpl)findViewObject("PerPSActionHistoryVO1");
    }


    /**Container's getter for XxupPerPSInstOfficeEOVO1
     */
    public XxupPerPSInstOfficeEOVOImpl getXxupPerPSInstOfficeEOVO1() {
        return (XxupPerPSInstOfficeEOVOImpl)findViewObject("XxupPerPSInstOfficeEOVO1");
    }

    /**Container's getter for XxupPerPSInstOtherMembersVO1
     */
    public XxupPerPSInstOtherMembersVOImpl getXxupPerPSInstOtherMembersVO1() {
        return (XxupPerPSInstOtherMembersVOImpl)findViewObject("XxupPerPSInstOtherMembersVO1");
    }

    /**Container's getter for XxupPerPSInstMembersEOVO1
     */
    public XxupPerPSInstMembersEOVOImpl getXxupPerPSInstMembersEOVO1() {
        return (XxupPerPSInstMembersEOVOImpl)findViewObject("XxupPerPSInstMembersEOVO1");
    }


    /**Container's getter for XxupPerPSInstPartnerOrgEOVO1
     */
    public XxupPerPSInstPartnerOrgEOVOImpl getXxupPerPSInstPartnerOrgEOVO1() {
        return (XxupPerPSInstPartnerOrgEOVOImpl)findViewObject("XxupPerPSInstPartnerOrgEOVO1");
    }

    /**Container's getter for XxupPerPSInstDeliveryModeEOVO1
     */
    public XxupPerPSInstDeliveryModeEOVOImpl getXxupPerPSInstDeliveryModeEOVO1() {
        return (XxupPerPSInstDeliveryModeEOVOImpl)findViewObject("XxupPerPSInstDeliveryModeEOVO1");
    }

    /**Container's getter for PerPSInstDeliveryModeVO1
     */
    public PerPSInstDeliveryModeVOImpl getPerPSInstDeliveryModeVO1() {
        return (PerPSInstDeliveryModeVOImpl)findViewObject("PerPSInstDeliveryModeVO1");
    }

    /**Container's getter for PerPSAddressVO1
     */
    public PerPSAddressVOImpl getPerPSAddressVO1() {
        return (PerPSAddressVOImpl)findViewObject("PerPSAddressVO1");
    }

    /**Container's getter for XxupPerPSInstBenefTypeEOVO1
     */
    public XxupPerPSInstBenefTypeEOVOImpl getXxupPerPSInstBenefTypeEOVO1() {
        return (XxupPerPSInstBenefTypeEOVOImpl)findViewObject("XxupPerPSInstBenefTypeEOVO1");
    }

    /**Container's getter for PerPSBeneficiaryTypeVO1
     */
    public PerPSBeneficiaryTypeVOImpl getPerPSBeneficiaryTypeVO1() {
        return (PerPSBeneficiaryTypeVOImpl)findViewObject("PerPSBeneficiaryTypeVO1");
    }

    /**Container's getter for XxupPerPSInstBenefOrgEOVO1
     */
    public XxupPerPSInstBenefOrgEOVOImpl getXxupPerPSInstBenefOrgEOVO1() {
        return (XxupPerPSInstBenefOrgEOVOImpl)findViewObject("XxupPerPSInstBenefOrgEOVO1");
    }

    /**Container's getter for XxupPerPSInstTrEOVO1
     */
    public XxupPerPSInstTrEOVOImpl getXxupPerPSInstTrEOVO1() {
        return (XxupPerPSInstTrEOVOImpl)findViewObject("XxupPerPSInstTrEOVO1");
    }

    /**Container's getter for XxupPerPSInstitutionalEOVO1
     */
    public XxupPerPSInstitutionalEOVOImpl getXxupPerPSInstitutionalEOVO1() {
        return (XxupPerPSInstitutionalEOVOImpl)findViewObject("XxupPerPSInstitutionalEOVO1");
    }


    /**Container's getter for PerPSInstActivitiesVO1
     */
    public PerPSInstActivitiesVOImpl getPerPSInstActivitiesVO1() {
        return (PerPSInstActivitiesVOImpl)findViewObject("PerPSInstActivitiesVO1");
    }

    /**Container's getter for XxupPerPSInstActivitiesEOVO1
     */
    public XxupPerPSInstActivitiesEOVOImpl getXxupPerPSInstActivitiesEOVO1() {
        return (XxupPerPSInstActivitiesEOVOImpl)findViewObject("XxupPerPSInstActivitiesEOVO1");
    }

    /**Container's getter for PerPSInstAdminSummaryVO1
     */
    public PerPSInstAdminSummaryVOImpl getPerPSInstAdminSummaryVO1() {
        return (PerPSInstAdminSummaryVOImpl)findViewObject("PerPSInstAdminSummaryVO1");
    }
}
